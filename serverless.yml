# Rename me
service: SeaSketchReportingCore

provider:
  name: aws
  runtime: nodejs8.10
  stage: production
  memorySize: 512 # Default memory size. Can be set in individual functions too
  region: us-west-2

  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - 'sqs:*'
      Resource:
        Fn::GetAtt:
          - LogQueue
          - Arn
    - Effect: "Allow"
      Action: "s3:*"
      Resource:
        Fn::Join:
          - ''
          - - Fn::GetAtt:
              - ReportOutputs
              - Arn
            - "/*"


package:
  individually: true
  exclude:
    - packages/
    - packages/**

functions:
  forwarder:
    handler: src/forwarder.handler
    memorySize: 128
    environment:
      SQS_ENDPOINT:
        Ref: LogQueue

resources:
  Resources:
    ReportClientCode:
      Type: AWS::S3::Bucket
    ClientCodeBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: ReportClientCodeBucketPolicyDoc
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: ReportClientCode
                    - /*
        Bucket:
          Ref: ReportClientCode
    ReportOutputs:
      Type: AWS::S3::Bucket
    ReportOutputsBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: ReportOutputsBucketPolicyDoc
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: ReportOutputs
                    - /*
        Bucket:
          Ref: ReportOutputs
    ForwarderLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Fn::GetAtt:
            - ForwarderLambdaFunction
            - Arn
        Principal: logs.${self:provider.region}.amazonaws.com
    LogQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144 # 256kb
        MessageRetentionPeriod: 86400 # 1 day in seconds
        QueueName: ReportsLogQueue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 30 # seconds
    EC2LogQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144 # 256kb
        MessageRetentionPeriod: 86400 # 1 day in seconds
        QueueName: EC2ReportsLogQueue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 30 # seconds
    ResultsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144 # 256kb
        MessageRetentionPeriod: 86400 # 1 day in seconds
        QueueName: ReportResultsQueue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 10 # seconds
    PostDeployMetadataQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144 # 256kb
        MessageRetentionPeriod: 86400 # 1 day in seconds
        QueueName: PostDeployMetadataQueue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 10 # seconds
    PostDeployJSClientMetadataQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        DelaySeconds: 0
        MaximumMessageSize: 262144 # 256kb
        MessageRetentionPeriod: 86400 # 1 day in seconds
        QueueName: PostDeployJSClientMetadataQueue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 10 # seconds
    AMIWorkerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: baseAmiWorkerRole
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "root"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "sqs:*"
                  Resource:
                    Fn::GetAtt:
                      - LogQueue
                      - Arn
                - Effect: "Allow"
                  Action: "sqs:*"
                  Resource:
                    Fn::GetAtt:
                      - ResultsQueue
                      - Arn
                - Effect: "Allow"
                  Action: "sqs:*"
                  Resource:
                    Fn::GetAtt:
                      - EC2LogQueue
                      - Arn
                - Effect: "Allow"
                  Action:
                    - "s3:DeleteObject"
                    - "s3:GetBucketLocation"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                    - "s3:PutObject"
                    - "s3:ListObjects"
                  Resource:
                    - Fn::Join:
                      - ''
                      - - Fn::GetAtt:
                          - ReportOutputs
                          - Arn
                        - "/*"
                    - Fn::Join:
                      - ''
                      - - Fn::GetAtt:
                          - ReportOutputs
                          - Arn
    AMIWorkerInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Path: "/geoprocessing/iamWorker/"
        Roles:
          - "baseAmiWorkerRole"
        InstanceProfileName: "amiWorkerProfile"
  Outputs:
    ReportClientCode:
      Description: s3 bucket for seasketch-sls-geoprocessing javascript clients
      Value:
        Ref: ReportClientCode
      Export:
        Name: ReportClientCode
    ReportOutputsBucket:
      Description: s3 bucket
      Value:
        Ref: ReportOutputs
      Export:
        Name: ReportOutputs
    LogForwarder:
      Description: Cloudwatch Log forwarder
      Value:
        Fn::GetAtt:
          - ForwarderLambdaFunction
          - Arn
      Export:
        Name: ReportLogsForwarder
    LogQueueArn:
      Description: sqs queue arn for logs
      Value:
        Fn::GetAtt:
          - LogQueue
          - Arn
      Export:
        Name: ReportsLogQueueArn
    EC2LogQueueArn:
      Description: sqs queue arn for ec2 logs
      Value:
        Fn::GetAtt:
          - EC2LogQueue
          - Arn
      Export:
        Name: EC2ReportsLogQueueArn
    ResultsQueueArn:
      Description: sqs queue arn for report results
      Value:
        Fn::GetAtt:
          - ResultsQueue
          - Arn
      Export:
        Name: ReportResultsQueueArn
    ResultsQueueEndpoint:
      Description: sqs queue endpoint for report results
      Value:
        Ref: ResultsQueue
      Export:
        Name: ReportResultsQueueEndpoint
    LogsQueueEndpoint:
      Description: sqs queue endpoint for logs
      Value:
        Ref: LogQueue
      Export:
        Name: LogsQueueEndpoint
    EC2LogsQueueEndpoint:
      Description: sqs queue endpoint for ec2 logs
      Value:
        Ref: EC2LogQueue
      Export:
        Name: EC2LogsQueueEndpoint
    PostDeployMetadataQueueEndpoint:
      Description: sqs queue endpoint metadata about lambdas
      Value:
        Ref: PostDeployMetadataQueue
      Export:
        Name: PostDeployMetadataQueueEndpoint
    PostDeployJSClientMetadataQueueEndpoint:
      Description: sqs queue endpoint metadata about js report clients
      Value:
        Ref: PostDeployJSClientMetadataQueue
      Export:
        Name: PostDeployJSClientMetadataQueueEndpoint
